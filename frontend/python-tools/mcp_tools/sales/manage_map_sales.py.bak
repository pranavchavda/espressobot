#!/usr/bin/env python3
"""
Enhanced MAP (Minimum Advertised Price) sales manager with sale end dates.

This tool reads the enhanced sales calendar and can:
1. Check what sales should be active today
2. Apply sale prices and set sale end dates
3. Revert prices back to regular and clear sale end dates
4. Preview changes before applying them
5. Handle both calendar-based and direct date range operations

Usage:
    # Check active sales
    python tools/manage_map_sales_enhanced.py check
    
    # Apply sales (dry run)
    python tools/manage_map_sales_enhanced.py --dry-run apply
    
    # Apply sales
    python tools/manage_map_sales_enhanced.py apply
    
    # Revert sales
    python tools/manage_map_sales_enhanced.py revert "11 Jul - 17 Jul"
    
    # Show calendar summary
    python tools/manage_map_sales_enhanced.py summary
"""

import argparse
import re
from datetime import datetime, date, timezone
from pathlib import Path
import sys
import os
import json

# Add parent directory to path for imports
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from base import ShopifyClient

class MAPSalesManager:
    def __init__(self, calendar_file, dry_run=False):
        self.calendar_file = Path(calendar_file)
        self.dry_run = dry_run
        self.sales_data = {}
        self.client = ShopifyClient()
        self.load_calendar()
    
    def load_calendar(self):
        """Load and parse the enhanced markdown calendar."""
        if not self.calendar_file.exists():
            raise FileNotFoundError(f"Calendar file not found: {self.calendar_file}")
        
        with open(self.calendar_file, 'r') as f:
            content = f.read()
        
        # Parse markdown sections by date ranges
        date_pattern = r'^## (.+ - .+)$'
        current_date_range = None
        
        for line in content.split('\n'):
            # Check for date range header
            date_match = re.match(date_pattern, line)
            if date_match:
                current_date_range = date_match.group(1)
                self.sales_data[current_date_range] = []
                continue
            
            # Parse table rows (skip headers and separators)
            if current_date_range and line.startswith('|') and not line.startswith('| Product') and not line.startswith('|---'):
                parts = [p.strip() for p in line.split('|')[1:-1]]  # Remove empty first/last elements
                if len(parts) >= 8:
                    product_data = {
                        'product_title': parts[0],
                        'color': parts[1],
                        'sku': parts[2],
                        'regular_price': float(parts[3].replace('$', '').replace(',', '')),
                        'sale_price': float(parts[4].replace('$', '').replace(',', '')),
                        'discount': parts[5],
                        'product_id': parts[6],
                        'variant_id': parts[7] if len(parts) > 7 else None
                    }
                    self.sales_data[current_date_range].append(product_data)
    
    def search_product_by_sku(self, sku):
        """Search for active product by SKU"""
        query = '''
        query searchBySku($query: String!) {
            products(first: 5, query: $query) {
                edges {
                    node {
                        id
                        title
                        handle
                        tags
                        status
                        variants(first: 10) {
                            edges {
                                node {
                                    id
                                    title
                                    sku
                                    price
                                    compareAtPrice
                                }
                            }
                        }
                    }
                }
            }
        }
        '''
        
        variables = {"query": f"sku:{sku} status:active"}
        
        try:
            response = self.client.execute_graphql(query, variables)
            if response and 'data' in response:
                products = response['data']['products']['edges']
                
                # Find exact SKU match
                for product_edge in products:
                    product = product_edge['node']
                    for variant_edge in product['variants']['edges']:
                        variant = variant_edge['node']
                        if variant['sku'] == sku:
                            return {
                                'product_id': product['id'],
                                'variant_id': variant['id'],
                                'current_price': float(variant['price']),
                                'compare_at': float(variant['compareAtPrice']) if variant['compareAtPrice'] else None,
                                'tags': product['tags']
                            }
        except Exception as e:
            print(f"Error searching for SKU {sku}: {e}")
        
        return None
    
    def parse_date_range(self, date_range):
        """Parse date range string into start and end dates."""
        # Format: "30 May - 05 Jun" or "26 Dec - 01 Jan"
        parts = date_range.split(' - ')
        
        # Parse start date
        start_parts = parts[0].split(' ')
        start_day = int(start_parts[0])
        start_month = start_parts[1]
        
        # Parse end date
        end_parts = parts[1].split(' ')
        end_day = int(end_parts[0])
        end_month = end_parts[1]
        
        # Convert month names to numbers
        months = {
            'Jan': 1, 'Feb': 2, 'Mar': 3, 'Apr': 4, 'May': 5, 'Jun': 6,
            'Jul': 7, 'Aug': 8, 'Sep': 9, 'Oct': 10, 'Nov': 11, 'Dec': 12
        }
        
        start_month_num = months[start_month]
        end_month_num = months[end_month]
        
        # Determine year (handle year boundary)
        current_year = datetime.now().year
        start_year = current_year
        end_year = current_year
        
        # If end month is January and start month is December, end year is next year
        if start_month_num == 12 and end_month_num == 1:
            end_year = current_year + 1
        
        start_date = date(start_year, start_month_num, start_day)
        end_date = date(end_year, end_month_num, end_day)
        
        return start_date, end_date
    
    def get_sale_end_datetime(self, date_range):
        """Convert date range to sale end datetime in ISO format."""
        _, end_date = self.parse_date_range(date_range)
        # Set to 11:59:59 PM UTC
        end_datetime = datetime.combine(end_date, datetime.max.time())
        end_datetime = end_datetime.replace(tzinfo=timezone.utc)
        return end_datetime.isoformat().replace('+00:00', 'Z')
    
    def get_active_sales(self, check_date=None):
        """Get all sales that should be active on the given date."""
        if check_date is None:
            check_date = date.today()
        
        active_sales = []
        active_date_range = None
        
        for date_range, products in self.sales_data.items():
            start_date, end_date = self.parse_date_range(date_range)
            
            # Check if date is within range
            if start_date <= check_date <= end_date:
                active_sales.extend(products)
                active_date_range = date_range
        
        return active_sales, active_date_range
    
    def update_product_sale_end_date(self, product_id, sale_end_date):
        """Update product's sale end date metafield."""
        mutation = '''
        mutation productUpdate($input: ProductInput!) {
            productUpdate(input: $input) {
                product {
                    id
                    title
                }
                userErrors {
                    field
                    message
                }
            }
        }
        '''
        
        variables = {
            "input": {
                "id": product_id,
                "metafields": [
                    {
                        "namespace": "inventory",
                        "key": "ShappifySaleEndDate",
                        "value": sale_end_date,
                        "type": "single_line_text_field"
                    }
                ]
            }
        }
        
        if self.dry_run:
            if sale_end_date:
                print(f"    [DRY RUN] Would set sale end date to {sale_end_date}")
            else:
                print(f"    [DRY RUN] Would clear sale end date")
            return True
        
        response = self.client.execute_graphql(mutation, variables)
        
        if response.get('data', {}).get('productUpdate', {}).get('userErrors'):
            errors = response['data']['productUpdate']['userErrors']
            print(f"    ❌ Error setting sale end date: {errors}")
            return False
        
        return True
    
    def apply_sales(self, target_date=None):
        """Apply sale prices for all products that should be on sale on the target date."""
        if target_date is None:
            target_date = date.today()
        
        active_sales, active_date_range = self.get_active_sales(target_date)
        
        if not active_sales:
            print(f"No sales found for {target_date}")
            return
        
        # Get sale end date for this period
        sale_end_date = self.get_sale_end_datetime(active_date_range)
        
        print(f"\nApplying sale prices for {active_date_range}")
        print(f"Sale end date: {sale_end_date}")
        print("=" * 80)
        
        # Process sales by SKU
        updates_made = 0
        already_on_sale = 0
        not_found = 0
        not_map = 0
        unique_product_ids = set()
        
        for product in active_sales:
            sku = product['sku']
            print(f"\nSearching for SKU: {sku}")
            
            # Search for active product
            product_info = self.search_product_by_sku(sku)
            
            if not product_info:
                print(f"  ❌ Product not found or not active")
                not_found += 1
                continue
            
            # Check if it's a MAP product
            if 'BREMAP' not in product_info['tags']:
                print(f"  ⚠️  Skipping - not a MAP product")
                not_map += 1
                continue
            
            # Track unique products for sale end dates
            unique_product_ids.add(product_info['product_id'])
            
            # Check if already on sale at correct price
            if (product_info['compare_at'] and 
                abs(product_info['current_price'] - product['sale_price']) < 0.01):
                print(f"  ✓ Already on sale at ${product_info['current_price']}")
                already_on_sale += 1
                continue
            
            print(f"  {product['product_title']} - {product['color']}")
            print(f"    ${product_info['current_price']} → ${product['sale_price']} ({product['discount']})")
            
            if self.dry_run:
                print(f"  [DRY RUN] Would update price and set sale end date")
                updates_made += 1
                continue
            
            # Update pricing
            mutation = '''
            mutation updateVariantPrice($productId: ID!, $variants: [ProductVariantsBulkInput!]!) {
                productVariantsBulkUpdate(productId: $productId, variants: $variants) {
                    productVariants {
                        id
                        price
                        compareAtPrice
                    }
                    userErrors {
                        field
                        message
                    }
                }
            }
            '''
            
            variables = {
                "productId": product_info['product_id'],
                "variants": [{
                    "id": product_info['variant_id'],
                    "price": str(product['sale_price']),
                    "compareAtPrice": str(product['regular_price'])
                }]
            }
            
            response = self.client.execute_graphql(mutation, variables)
            
            if response.get('data', {}).get('productVariantsBulkUpdate', {}).get('userErrors'):
                errors = response['data']['productVariantsBulkUpdate']['userErrors']
                print(f"  ❌ Error updating price: {errors}")
            else:
                print(f"  ✅ Price updated successfully")
                updates_made += 1
        
        # Set sale end dates for unique products
        if not self.dry_run:
            print(f"\nSetting sale end dates for {len(unique_product_ids)} products...")
            for product_id in unique_product_ids:
                self.update_product_sale_end_date(product_id, sale_end_date)
        
        print("\n" + "=" * 80)
        print(f"Summary:")
        print(f"  Products updated: {updates_made}")
        print(f"  Already on sale: {already_on_sale}")
        print(f"  Not found/inactive: {not_found}")
        print(f"  Not MAP products: {not_map}")
        print(f"  Sale end dates: {len(unique_product_ids)} products")
    
    def revert_prices(self, date_range):
        """Revert prices back to regular for a specific date range and clear sale end dates."""
        if date_range not in self.sales_data:
            print(f"Date range '{date_range}' not found in calendar")
            print("\nAvailable date ranges:")
            for dr in sorted(self.sales_data.keys()):
                print(f"  - {dr}")
            return
        
        products = self.sales_data[date_range]
        print(f"\nReverting prices for {date_range}")
        print("This will also clear sale end date metafields")
        print("=" * 80)
        
        # Process by SKU
        reverted = 0
        not_on_sale = 0
        not_found = 0
        unique_product_ids = set()
        
        for product in products:
            sku = product['sku']
            print(f"\nSearching for SKU: {sku}")
            
            # Search for active product
            product_info = self.search_product_by_sku(sku)
            
            if not product_info:
                print(f"  ❌ Product not found or not active")
                not_found += 1
                continue
            
            # Track unique products for clearing sale end dates
            unique_product_ids.add(product_info['product_id'])
            
            # Check if currently on sale
            if not product_info['compare_at']:
                print(f"  ⚠️  Not currently on sale")
                not_on_sale += 1
                continue
            
            print(f"  {product['product_title']} - {product['color']}")
            print(f"    Reverting to regular price: ${product['regular_price']}")
            
            if self.dry_run:
                print(f"  [DRY RUN] Would revert price and clear sale end date")
                reverted += 1
                continue
            
            # Revert pricing
            mutation = '''
            mutation updateVariantPrice($productId: ID!, $variants: [ProductVariantsBulkInput!]!) {
                productVariantsBulkUpdate(productId: $productId, variants: $variants) {
                    productVariants {
                        id
                        price
                        compareAtPrice
                    }
                    userErrors {
                        field
                        message
                    }
                }
            }
            '''
            
            variables = {
                "productId": product_info['product_id'],
                "variants": [{
                    "id": product_info['variant_id'],
                    "price": str(product['regular_price']),
                    "compareAtPrice": None
                }]
            }
            
            response = self.client.execute_graphql(mutation, variables)
            
            if response.get('data', {}).get('productVariantsBulkUpdate', {}).get('userErrors'):
                errors = response['data']['productVariantsBulkUpdate']['userErrors']
                print(f"  ❌ Error reverting price: {errors}")
            else:
                print(f"  ✅ Price reverted successfully")
                reverted += 1
        
        # Clear sale end dates
        if not self.dry_run:
            print(f"\nClearing sale end dates for {len(unique_product_ids)} products...")
            for product_id in unique_product_ids:
                self.update_product_sale_end_date(product_id, "")
        
        print("\n" + "=" * 80)
        print(f"Summary:")
        print(f"  Products reverted: {reverted}")
        print(f"  Not on sale: {not_on_sale}")
        print(f"  Not found/inactive: {not_found}")
        print(f"  Sale end dates cleared: {len(unique_product_ids)} products")
    
    def show_calendar_summary(self):
        """Display a summary of all sale periods."""
        print("\nBreville MAP Sales Calendar Summary")
        print("=" * 80)
        
        for date_range in sorted(self.sales_data.keys(), 
                                 key=lambda x: self.parse_date_range(x)[0]):
            products = self.sales_data[date_range]
            start_date, end_date = self.parse_date_range(date_range)
            
            # Check if currently active
            today = date.today()
            is_active = start_date <= today <= end_date
            status = "🟢 ACTIVE" if is_active else "⏰ Scheduled"
            
            print(f"\n{status} {date_range} ({len(products)} products)")
            
            # Group by product name
            product_groups = {}
            for p in products:
                name = p['product_title'].split(' - ')[0]  # Remove color from title
                if name not in product_groups:
                    product_groups[name] = []
                product_groups[name].append(p)
            
            for name, variants in product_groups.items():
                print(f"  • {name} ({len(variants)} colors) - {variants[0]['discount']} off")


def main():
    parser = argparse.ArgumentParser(
        description='Enhanced MAP sales manager with sale end dates',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog=__doc__
    )
    parser.add_argument('--calendar', default='resources/breville_espresso_sales_2025_enhanced.md',
                        help='Path to enhanced calendar file')
    parser.add_argument('--dry-run', action='store_true',
                        help='Preview changes without applying them')
    
    subparsers = parser.add_subparsers(dest='command', help='Commands')
    
    # Check command
    check_parser = subparsers.add_parser('check', help='Check what sales should be active')
    check_parser.add_argument('--date', help='Check for specific date (YYYY-MM-DD)')
    
    # Apply command
    apply_parser = subparsers.add_parser('apply', help='Apply sale prices and set sale end dates')
    apply_parser.add_argument('--date', help='Apply sales for specific date (YYYY-MM-DD)')
    
    # Revert command
    revert_parser = subparsers.add_parser('revert', help='Revert prices to regular and clear sale end dates')
    revert_parser.add_argument('date_range', help='Date range to revert (e.g., "11 Jul - 17 Jul")')
    
    # Summary command
    summary_parser = subparsers.add_parser('summary', help='Show calendar summary')
    
    args = parser.parse_args()
    
    if not args.command:
        parser.print_help()
        return
    
    # Initialize manager
    manager = MAPSalesManager(args.calendar, args.dry_run)
    
    if args.command == 'check':
        check_date = date.today()
        if args.date:
            check_date = datetime.strptime(args.date, '%Y-%m-%d').date()
        
        active_sales, active_date_range = manager.get_active_sales(check_date)
        if active_sales:
            print(f"\nActive sales for {check_date}:")
            print(f"Sale period: {active_date_range}")
            print("=" * 80)
            for product in active_sales:
                print(f"{product['product_title']} - {product['color']}: "
                      f"${product['regular_price']:.2f} → ${product['sale_price']:.2f} ({product['discount']})")
        else:
            print(f"No active sales for {check_date}")
    
    elif args.command == 'apply':
        target_date = date.today()
        if args.date:
            target_date = datetime.strptime(args.date, '%Y-%m-%d').date()
        manager.apply_sales(target_date)
    
    elif args.command == 'revert':
        manager.revert_prices(args.date_range)
    
    elif args.command == 'summary':
        manager.show_calendar_summary()


if __name__ == '__main__':
    main()