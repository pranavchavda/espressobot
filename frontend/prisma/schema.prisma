generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model agent_runs {
  id            Int           @id @default(autoincrement())
  conv_id       Int
  tasks         String
  created_at    DateTime      @default(now())
  updated_at    DateTime      @updatedAt @default(now())
  conversations conversations @relation(fields: [conv_id], references: [id], onDelete: NoAction)
}

model alembic_version {
  version_num String @id @default(cuid())
}

model competitor_products {
  id               String            @id @default(cuid())
  external_id      String
  competitor_id    String
  title            String
  vendor           String?
  product_type     String?
  handle           String?
  sku              String?
  price            Decimal?          @db.Decimal(10, 2)
  compare_at_price Decimal?          @db.Decimal(10, 2)
  available        Boolean           @default(true)
  image_url        String?
  product_url      String?
  description      String?
  features         String?
  embedding        String?
  scraped_at       DateTime          @default(now())
  created_at       DateTime          @default(now())
  updated_at       DateTime          @updatedAt @default(now())
  competitors      competitors       @relation(fields: [competitor_id], references: [id], onDelete: Cascade)
  price_history    price_history[]
  product_matches  product_matches[]

  @@unique([external_id, competitor_id])
  @@index([competitor_id])
  @@index([price])
  @@index([scraped_at])
  @@index([vendor])
}

model competitors {
  id                  String                @id @default(cuid())
  name                String
  domain              String                @unique
  collections         String[]
  is_active           Boolean               @default(true)
  scrape_schedule     String?
  rate_limit_ms       Int                   @default(2000)
  last_scraped_at     DateTime?
  total_products      Int                   @default(0)
  created_at          DateTime              @default(now())
  updated_at          DateTime
  exclude_patterns    String[]              @default([])
  scraping_strategy   String                @default("collections")
  search_terms        String[]              @default([])
  url_patterns        String[]              @default([])
  competitor_products competitor_products[]
  scrape_jobs         scrape_jobs[]

  @@index([is_active])
  @@index([last_scraped_at])
}

model conversation_summaries {
  id              Int           @id @default(autoincrement())
  conv_id         Int
  summary         String
  start_msg_index Int
  end_msg_index   Int
  chunk_number    Int
  created_at      DateTime      @default(now())
  updated_at      DateTime      @updatedAt @default(now())
  conversations   conversations @relation(fields: [conv_id], references: [id], onDelete: NoAction)

  @@index([conv_id, chunk_number])
}

model conversations {
  id                     Int                      @id @default(autoincrement())
  user_id                Int
  title                  String
  topic_title            String?
  topic_details          String?
  created_at             DateTime?
  updated_at             DateTime?
  filename               String                   @unique
  agent_runs             agent_runs[]
  conversation_summaries conversation_summaries[]
  users                  users                    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  messages               messages[]
}

model embedding_cache {
  id                     Int                      @id @default(autoincrement())
  text_hash              String                   @unique(map: "ix_embedding_cache_text_hash")
  text_content           String
  embedding_data         Bytes
  model_name             String
  created_at             DateTime?
  last_accessed          DateTime?
  user_memory_embeddings user_memory_embeddings[]
}

model idc_products {
  id                 String            @id @default(cuid())
  shopify_id         String            @unique
  title              String
  vendor             String
  product_type       String?
  handle             String?
  sku                String?
  price              Decimal?          @db.Decimal(10, 2)
  compare_at_price   Decimal?          @db.Decimal(10, 2)
  available          Boolean           @default(true)
  image_url          String?
  description        String?
  features           String?
  embedding          String?
  last_synced_at     DateTime          @default(now())
  created_at         DateTime          @default(now())
  updated_at         DateTime
  brand_id           String
  inventory_quantity Int?
  monitored_brands   monitored_brands  @relation(fields: [brand_id], references: [id])
  product_matches    product_matches[]

  @@index([available])
  @@index([last_synced_at])
  @@index([product_type])
  @@index([vendor])
}

model memories {
  id         String   @id @default(cuid())
  user_id    String
  content    String
  embedding  Bytes?
  metadata   String?
  created_at DateTime @default(now())
  updated_at DateTime

  @@index([created_at])
  @@index([user_id])
}

model messages {
  id               Int           @id @default(autoincrement())
  conv_id          Int
  role             String?
  content          String
  original_content String?
  tool_call_id     String?
  tool_name        String?
  created_at       DateTime?
  edited_at        DateTime?
  conversations    conversations @relation(fields: [conv_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model monitored_brands {
  id           String         @id @default(cuid())
  brand_name   String         @unique
  is_active    Boolean        @default(true)
  created_at   DateTime       @default(now())
  updated_at   DateTime
  idc_products idc_products[]

  @@index([is_active])
}

model monitored_collections {
  id              String   @id @default(cuid())
  collection_name String   @unique
  is_active       Boolean  @default(true)
  created_at      DateTime @default(now())
  updated_at      DateTime

  @@index([is_active])
}

model price_alerts {
  id               String          @id @default(cuid())
  product_match_id String
  alert_type       String
  title            String
  message          String
  severity         String          @default("medium")
  old_price        Decimal?        @db.Decimal(10, 2)
  new_price        Decimal?        @db.Decimal(10, 2)
  price_change     Decimal?        @db.Decimal(10, 2)
  status           String          @default("unread")
  is_read          Boolean         @default(false)
  created_at       DateTime        @default(now())
  updated_at       DateTime          @updatedAt @default(now())
  product_matches  product_matches @relation(fields: [product_match_id], references: [id], onDelete: Cascade)

  @@index([alert_type])
  @@index([created_at])
  @@index([severity])
  @@index([status])
}

model price_history {
  id                    String              @id @default(cuid())
  competitor_product_id String
  price                 Decimal             @db.Decimal(10, 2)
  compare_at_price      Decimal?            @db.Decimal(10, 2)
  available             Boolean             @default(true)
  recorded_at           DateTime            @default(now())
  updated_at            DateTime            @updatedAt @default(now())
  competitor_products   competitor_products @relation(fields: [competitor_product_id], references: [id], onDelete: Cascade)

  @@index([competitor_product_id, recorded_at])
}

model product_matches {
  id                       String              @id @default(cuid())
  idc_product_id           String
  competitor_product_id    String
  overall_score            Float
  brand_similarity         Float?
  title_similarity         Float?
  embedding_similarity     Float?
  price_similarity         Float?
  price_difference         Decimal?            @db.Decimal(10, 2)
  price_difference_percent Float?
  is_map_violation         Boolean             @default(false)
  violation_amount         Decimal?            @db.Decimal(10, 2)
  violation_percentage     Float?
  first_violation_date     DateTime?
  last_checked_at          DateTime            @default(now())
  is_manual_match          Boolean             @default(false)
  is_rejected              Boolean             @default(false)
  confidence_level         String              @default("low")
  created_at               DateTime            @default(now())
  updated_at               DateTime
  price_alerts             price_alerts[]
  competitor_products      competitor_products @relation(fields: [competitor_product_id], references: [id], onDelete: Cascade)
  idc_products             idc_products        @relation(fields: [idc_product_id], references: [id], onDelete: Cascade)
  violation_history        violation_history[]

  @@unique([idc_product_id, competitor_product_id])
  @@index([confidence_level])
  @@index([is_map_violation])
  @@index([last_checked_at])
  @@index([overall_score])
}

model scrape_jobs {
  id               String      @id @default(cuid())
  competitor_id    String
  status           String      @default("pending")
  collections      String[]
  products_found   Int?
  products_updated Int?
  products_created Int?
  errors           String?
  started_at       DateTime?
  completed_at     DateTime?
  duration_seconds Int?
  created_at       DateTime    @default(now())
  updated_at       DateTime    @updatedAt @default(now())
  competitors      competitors @relation(fields: [competitor_id], references: [id], onDelete: Cascade)

  @@index([competitor_id])
  @@index([created_at])
  @@index([status])
}

model tool_result_cache {
  id            String   @id @default(cuid())
  tool_name     String
  input_hash    String   @unique
  result        String
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt @default(now())
  last_accessed DateTime @default(now())

  @@index([created_at])
  @@index([tool_name])
}

model user_memories {
  id         Int       @id @default(autoincrement())
  user_id    Int
  key        String
  value      String
  created_at DateTime?
  updated_at DateTime?
  users      users     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([user_id, key], map: "unique_user_memory_key")
}

model user_memory_embeddings {
  id                 Int             @id @default(autoincrement())
  user_id            Int
  memory_key         String
  embedding_cache_id Int
  created_at         DateTime?
  embedding_cache    embedding_cache @relation(fields: [embedding_cache_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users              users           @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([user_id, memory_key], map: "unique_user_memory_embedding")
}

model users {
  id                     Int                      @id @default(autoincrement())
  email                  String                   @unique(map: "ix_users_email")
  password_hash          String?
  name                   String?
  bio                    String?
  is_whitelisted         Boolean                  @default(true)
  is_admin               Boolean                  @default(false)
  created_at             DateTime?
  google_id              String?                  @unique(map: "idx_users_google_id")
  profile_picture        String?
  google_access_token    String?
  google_refresh_token   String?
  google_token_expiry    DateTime?
  ga4_property_id        String?                  @default("325181275")
  ga4_enabled            Boolean                  @default(true)
  conversations          conversations[]
  user_memories          user_memories[]
  user_memory_embeddings user_memory_embeddings[]
}

model violation_history {
  id                String          @id @default(cuid())
  product_match_id  String
  violation_type    String
  competitor_price  Decimal         @db.Decimal(10, 2)
  idc_price         Decimal         @db.Decimal(10, 2)
  violation_amount  Decimal         @db.Decimal(10, 2)
  violation_percent Float
  previous_price    Decimal?        @db.Decimal(10, 2)
  price_change      Decimal?        @db.Decimal(10, 2)
  screenshot_url    String?
  competitor_url    String?
  notes             String?
  detected_at       DateTime        @default(now())
  updated_at        DateTime        @updatedAt @default(now())
  product_matches   product_matches @relation(fields: [product_match_id], references: [id], onDelete: Cascade)

  @@index([detected_at])
  @@index([product_match_id])
  @@index([violation_type])
}
