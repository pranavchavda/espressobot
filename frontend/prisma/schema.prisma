generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model alembic_version {
  version_num String @id
}

model conversations {
  id           Int          @id @default(autoincrement())
  user_id      Int
  title        String
  topic_title  String?      // Concise topic title
  topic_details String?     // Detailed topic description
  created_at   DateTime?
  updated_at   DateTime?
  filename     String       @unique
  agent_runs   agent_runs[]
  users        users        @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  messages     messages[]
  summaries    conversation_summaries[]
}

model embedding_cache {
  id                     Int                      @id @default(autoincrement())
  text_hash              String                   @unique(map: "ix_embedding_cache_text_hash")
  text_content           String
  embedding_data         Bytes
  model_name             String
  created_at             DateTime?
  last_accessed          DateTime?
  user_memory_embeddings user_memory_embeddings[]
}

model messages {
  id            Int           @id @default(autoincrement())
  conv_id       Int
  role          String?
  content       String
  tool_call_id  String?
  tool_name     String?
  created_at    DateTime?
  conversations conversations @relation(fields: [conv_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user_memories {
  id         Int       @id @default(autoincrement())
  user_id    Int
  key        String
  value      String
  created_at DateTime?
  updated_at DateTime?
  users      users     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([user_id, key], map: "unique_user_memory_key")
}

model user_memory_embeddings {
  id                 Int             @id @default(autoincrement())
  user_id            Int
  memory_key         String
  embedding_cache_id Int
  created_at         DateTime?
  embedding_cache    embedding_cache @relation(fields: [embedding_cache_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users              users           @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([user_id, memory_key], map: "unique_user_memory_embedding")
}

model users {
  id                     Int                      @id @default(autoincrement())
  email                  String                   @unique(map: "ix_users_email")
  password_hash          String?
  name                   String?
  bio                    String?
  is_whitelisted         Boolean                  @default(true)
  is_admin               Boolean                  @default(false)
  created_at             DateTime?
  google_id              String?                  @unique(map: "idx_users_google_id")
  profile_picture        String?
  conversations          conversations[]
  user_memories          user_memories[]
  user_memory_embeddings user_memory_embeddings[]
}

model agent_runs {
  id            Int           @id @default(autoincrement())
  conv_id       Int
  tasks         String
  created_at    DateTime      @default(now())
  conversations conversations @relation(fields: [conv_id], references: [id], onDelete: NoAction)
}

model conversation_summaries {
  id              Int           @id @default(autoincrement())
  conv_id         Int
  summary         String        // The summarized content
  start_msg_index Int           // Starting message index for this summary
  end_msg_index   Int           // Ending message index for this summary
  chunk_number    Int           // Which chunk this is (1st, 2nd, etc.)
  created_at      DateTime      @default(now())
  conversations   conversations @relation(fields: [conv_id], references: [id], onDelete: NoAction)
  
  @@index([conv_id, chunk_number])
}
